---
- name: install munin packages
  ansible.builtin.apt:
    pkg:
      - munin
      - munin-node
      - libcache-cache-perl # for mysql munin plugin
      - libdbd-mysql-perl # for mysql munin plugin
      - liblwp-protocol-https-perl # for nginx munin plugin
      - time # for wget_page munin plugin
      - net-tools # for netstat, used by a munin plugin
    state: present
    cache_valid_time: 3600

- name: copy configuration file of munin
  ansible.builtin.template:
    src: munin.conf.j2
    dest: /etc/munin/munin.conf
    mode: u=rw,g=r,o=r
  when: env != "vagrant"

- name: makes munin-node listen on IPv4 in Vagrant
  # otherwise there is a bug in Munin preventing munin-node to start, probably
  # because there is no IPv6 in the Vagrant box
  ansible.builtin.copy:
    src: etc/munin-node.conf
    dest: /etc/munin/munin-node.conf
    owner: root
    group: root
    mode: "0644"
  notify: restart munin-node
  when: env == "vagrant"

- name: create a munin-node override directory
  ansible.builtin.file:
    owner: root
    group: root
    mode: "0755"
    path: /etc/systemd/system/munin-node.service.d
    state: directory

- name: override munin-node service to wait for other services to start
  ansible.builtin.copy:
    src: systemd/munin-node-override.conf
    dest: /etc/systemd/system/munin-node.service.d/override.conf
    owner: root
    group: root
    mode: "0644"

- name: get memcached_multi munin plugin
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/mhwest13/Memcached-Munin-Plugin/master/memcached_multi_
    dest: "{{ munin_available_plugins_dir }}/memcached_multi_"
    mode: u=rwx,g=rx,o=rx
  when: install_zds

- name: get wget_page munin plugin
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/munin-monitoring/contrib/master/plugins/http/wget_page
    dest: "{{ munin_available_plugins_dir }}/wget_page"
    mode: u=rwx,g=rx,o=rx
  when: install_zds

- name: copy django.py munin plugin
  ansible.builtin.copy:
    remote_src: true
    src: "{{ appdir }}/django_munin/plugins/django.py"
    dest: "{{ munin_available_plugins_dir }}/django.py"
    mode: u=rwx,g=rx,o=rx
  when: install_zds

- name: copy zmd munin plugin
  ansible.builtin.copy:
    remote_src: true
    src: "{{ zmarkdown_dir }}/node_modules/zmarkdown/munin/zmd.sh"
    dest: "{{ munin_available_plugins_dir }}/zmd"
    mode: u=rwx,g=rx,o=rx
  when: install_zds

- name: copy typesense plugin
  ansible.builtin.copy:
    src: plugins/typesense
    dest: "{{ munin_available_plugins_dir }}/typesense"
    mode: u=rwx,g=rx,o=rx
  when: install_zds

- name: copy du_ and nginx_bots munin plugin
  ansible.builtin.copy:
    src: "plugins/{{ item }}"
    dest: "{{ munin_available_plugins_dir }}/{{ item }}"
    mode: u=rwx,g=rx,o=rx
  with_items:
    - du_
    - nginx_bots

- name: create symlinks for munin plugins
  ansible.builtin.file:
    src: "{{ munin_available_plugins_dir }}/{{ item.src }}"
    dest: /etc/munin/plugins/{{ item.dest }}
    state: link
  with_items: "{{ munin_enabled_plugins }}"

- name: create symlinks for zds munin plugins
  ansible.builtin.file:
    src: "{{ munin_available_plugins_dir }}/{{ item.src }}"
    dest: /etc/munin/plugins/{{ item.dest }}
    state: link
  with_items: "{{ munin_zds_enabled_plugins }}"
  when: install_zds

- name: check if postfix is installed
  ansible.builtin.package:
    name: postfix
    state: present
  check_mode: true
  register: installed_postfix_check

- name: create symlinks for postfix munin plugins
  ansible.builtin.file:
    src: "{{ munin_available_plugins_dir }}/{{ item.src }}"
    dest: /etc/munin/plugins/{{ item.dest }}
    state: link
  with_items:
    - { src: postfix_mailqueue, dest: postfix_mailqueue }
    - { src: postfix_mailstats, dest: postfix_mailstats }
    - { src: postfix_mailvolume, dest: postfix_mailvolume }
  when: installed_postfix_check is succeeded

- name: create symlink to du_backup munin plugin for beta server
  ansible.builtin.file:
    src: "{{ munin_available_plugins_dir }}/du_"
    dest: /etc/munin/plugins/du_backup
    state: link
  when: env == "beta"

- name: create symlink to du_ munin plugins for prod server
  ansible.builtin.file:
    src: "{{ munin_available_plugins_dir }}/du_"
    dest: "/etc/munin/plugins/du_{{ item }}"
    state: link
  with_items:
    - mysql-backup
    - zds-data
    - zds-db
  when: env == "prod"

- name: copy configuration file of several munin plugin
  ansible.builtin.template:
    src: plugin-conf.d/{{ item }}.j2
    dest: /etc/munin/plugin-conf.d/{{ item }}
    mode: u=rw,g=r,o=r
  with_items:
    - wget_page
    - nginx_bots
  when: install_zds

- name: copy configuration file of typesense munin plugin
  ansible.builtin.template:
    src: plugin-conf.d/typesense.j2
    dest: /etc/munin/plugin-conf.d/typesense
    mode: '640'  # the file contains the Typesense API key
  when: install_zds

- name: use correct MySQL user for Munin plugin
  ansible.builtin.lineinfile:
    path: /etc/munin/plugin-conf.d/munin-node
    regexp: ^env.mysqluser root
    line: env.mysqluser root
  when: env == "beta"

- name: copy configuration file of du_backup munin plugin for beta server
  ansible.builtin.template:
    src: plugin-conf.d/du_backup.j2
    dest: /etc/munin/plugin-conf.d/du_backup
    mode: u=rw,g=r,o=r
  when: env == "beta"

- name: copy configuration file of du_munin plugins for prod server
  ansible.builtin.template:
    src: plugin-conf.d/du_prod.j2
    dest: /etc/munin/plugin-conf.d/du
    mode: u=rw,g=r,o=r
  when: env == "prod"
