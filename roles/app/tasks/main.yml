- name: install app dependencies
  become: true
  apt:
    pkg:
      - python3
      - python3-dev
      - python3-venv
      - build-essential
      - libffi-dev
      - libssl-dev
      - libmariadb-dev
    state: present
    cache_valid_time: 3600

- name: should have a {{ appuser }} user
  become: true
  user:
    name: "{{ appuser }}"
    shell: /bin/false
    home: "{{ workdir }}"
    comment: "Zeste de Savoir"

- name: create the needed directories
  become: true
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ appuser }}"
    group: "{{ appuser }}"
  with_items:
    - "{{ logdir }}"
    - "{{ workdir }}"
    - "{{ appdir }}"
    - "{{ rundir }}"
    - "{{ datadir }}"
    - "{{ datadir }}/contents-private"
    - "{{ datadir }}/contents-public"
    - "{{ datadir }}/media"
    - "{{ datadir }}/static"

- name: checkout the application
  become: true
  become_user: "{{ appuser }}"
  git:
    repo: "{{ apprepo }}"
    dest: "{{ appdir }}"
    version: "{{ appversion }}"
    refspec: "+refs/pull/*:refs/pull/*"
  register: app
  notify:
    - reload zds
    - restart watchdog

- name: symlink data folders
  become: true
  become_user: "{{ appuser }}"
  file:
    src: "{{ datadir }}/{{ item }}"
    dest: "{{ appdir }}/{{ item }}"
    state: link
  with_items:
    - contents-private
    - contents-public
    - media
    - static

- name: install wheel and sqlparse in virtualenv
  become: true
  become_user: "{{ appuser }}"
  pip:
    name:
      - wheel
      - sqlparse
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: /usr/bin/pyvenv

- name: install requirements in virtualenv
  become: true
  become_user: "{{ appuser }}"
  pip:
    requirements: "{{ appdir }}/requirements-prod.txt"
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: /usr/bin/pyvenv
  when: app.changed

- name: save version file
  become: true
  become_user: "{{ appuser }}"
  template:
    src: templates/_version.py.j2
    dest: "{{ appdir }}/zds/_version.py"
    mode: "0644"

- name: save wrapper script
  become: true
  become_user: "{{ appuser }}"
  template:
    src: templates/wrapper.j2
    dest: "{{ workdir }}/wrapper"
    mode: "0755"

- name: create unit files
  template:
    src: templates/{{ item }}.j2
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - zds.service
    - zds.socket
    - zds-es-index.service
    - zds-es-index.timer
    - zds-watchdog.service

- name: create app config file
  become: true
  become_user: "{{ appuser }}"
  template:
    src: templates/config.toml.j2
    dest: "{{ workdir }}/config.toml"

- name: build front if repo changed
  include_tasks: frontend.yml
  when: app.changed

- name: collect static files
  become: true
  become_user: "{{ appuser }}"
  environment:
    DJANGO_SETTINGS_MODULE: "zds.settings.{{ env }}"
    ZDS_CONFIG: "{{ workdir }}/config.toml"
  django_manage:
    app_path: "{{ appdir }}"
    virtualenv: "{{ virtualenv }}"
    command: collectstatic
  when: app.changed

- name: create webroot
  file:
    path: "{{ webroot }}"
    state: directory

- name: create symlinks in webroot
  file:
    src: "{{ item.src }}"
    dest: "{{ webroot }}/{{ item.dest }}"
    state: link
  with_items:
    - src: "{{ appdir }}/errors"
      dest: "errors"
    - src: "{{ appdir }}/robots.txt"
      dest: "robots.txt"
    - src: "{{ datadir }}/media"
      dest: "media"
    - src: "{{ datadir }}/static"
      dest: "static"

- name: migrate database
  become: true
  become_user: "{{ appuser }}"
  environment:
    DJANGO_SETTINGS_MODULE: "zds.settings.{{ env }}"
    ZDS_CONFIG: "{{ workdir }}/config.toml"
  django_manage:
    app_path: "{{ appdir }}"
    virtualenv: "{{ virtualenv }}"
    command: migrate
  when: app.changed

- name: start services and timers
  systemd:
    state: started
    name: "{{ item }}"
    enabled: yes
    daemon_reload: yes
  with_items:
    - zds.service
    - zds.socket
    - zds-es-index.timer
    - zds-watchdog.service
