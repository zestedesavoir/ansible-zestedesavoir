# Basic dependencies installation

- name: install app dependencies
  ansible.builtin.apt:
    pkg:
      - python3-dev
      - python3-venv
      - python-setuptools
      - build-essential
      - libffi-dev
      - libssl-dev
      - libmariadb-dev
      - autoconf  # for gulp-imagemin Node.js package
      - automake  # for gulp-imagemin Node.js package
      - rustc  # for cryptography Python package
      - optipng  # for easy-thumbnails Python package
      - jpegoptim  # for easy-thumbnails Python package
      - memcached  # for cache storage in prod configuration
    state: present
    cache_valid_time: 3600
  tags:
    - bootstrap

- name: restart memcached
  ansible.builtin.systemd:
    name: memcached
    state: restarted
  tags:
    - bootstrap

# User, directories, files and symlink creation

- name: should have a {{ appuser }} user
  ansible.builtin.user:
    name: "{{ appuser }}"
    shell: /bin/false
    home: "{{ workdir }}"
    comment: "Zeste de Savoir"
  tags:
    - bootstrap

- name: create the needed directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ appuser }}"
    group: "{{ appuser }}"
    mode: u=rwx,g=rx,o=rx
  with_items:
    - "{{ logdir }}"
    - "{{ workdir }}"
    - "{{ appdir }}"
    - "{{ rundir }}"
    - "{{ datadir }}"
    - "{{ datadir }}/contents-private"
    - "{{ datadir }}/contents-public"
    - "{{ datadir }}/media"
    - "{{ datadir }}/static"
  tags:
    - bootstrap

- name: checkout the application
  become_user: "{{ appuser }}"
  vars:
    refspec: "{{ '+refs/pull/*:refs/pull/*' if 'pull/' in appversion else '+refs/heads/*:refs/remotes/origin/*' }}"
  ansible.builtin.git:
    repo: "{{ apprepo }}"
    dest: "{{ appdir }}"
    version: "{{ appversion }}"
    refspec: "{{ refspec }}"
  register: app
  tags:
    - bootstrap
    - upgrade

- name: symlink data folders
  ansible.builtin.file:
    src: "{{ datadir }}/{{ item }}"
    dest: "{{ appdir }}/{{ item }}"
    owner: "{{ appuser }}"
    group: "{{ appuser }}"
    state: link
  with_items:
    - contents-private
    - contents-public
    - media
    - static
  tags:
    - bootstrap

- name: save version file
  ansible.builtin.template:
    src: templates/_version.py.j2
    dest: "{{ appdir }}/zds/_version.py"
    owner: "{{ appuser }}"
    group: "{{ appuser }}"
    mode: u=rw,g=r,o=r
  tags:
    - bootstrap
    - upgrade

- name: save wrapper
  ansible.builtin.template:
    src: templates/wrapper.j2
    dest: "{{ workdir }}/wrapper"
    owner: "{{ appuser }}"
    group: "{{ appuser }}"
    mode: u=rwx,g=rx,o=rx
  tags:
    - bootstrap

- name: create app config file
  ansible.builtin.template:
    src: templates/config.toml.j2
    dest: "{{ workdir }}/config.toml"
    owner: "{{ appuser }}"
    group: "{{ appuser }}"
    mode: u=rw,g=r,o=r
  tags:
    - bootstrap
    - upgrade

- name: create Google Analytics API secrets file
  ansible.builtin.copy:
    content: "{{ google_analytics_api | combine(secrets.google_analytics_api) | to_nice_json }}"
    dest: "{{ appdir }}/api_analytics_secrets.json"
    owner: "{{ appuser }}"
    group: "{{ appuser }}"
    mode: u=rw,g=r,o=r
  when: secrets.google_analytics_api is defined
  tags:
    - bootstrap
    - upgrade

- name: create webroot
  ansible.builtin.file:
    path: "{{ webroot }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
  tags:
    - bootstrap

- name: create symlinks in webroot
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ webroot }}/{{ item.dest }}"
    state: link
  with_items:
    - src: "{{ appdir }}/errors"
      dest: "errors"
    - src: "{{ datadir }}/media"
      dest: "media"
    - src: "{{ datadir }}/static"
      dest: "static"
  tags:
    - bootstrap

- name: create robots.txt in webroot for prod
  ansible.builtin.file:
    src: "{{ appdir }}/robots.txt"
    dest: "{{ webroot }}/robots.txt"
    state: link
  when: env == "prod"
  tags:
    - bootstrap

- name: create robots.txt in webroot for beta
  ansible.builtin.copy:
    src: "robots-deny.txt"
    dest: "{{ webroot }}/robots.txt"
    mode: u=rw,g=r,o=r
  when: env == "beta"
  tags:
    - bootstrap

# Installation of backend, frontend and zmd dependencies

- name: update pip in virtualenv  # some dependencies (like rust ones) require a recent pip
  become_user: "{{ appuser }}"
  ansible.builtin.pip:
    name:
      - pip
    extra_args: --upgrade
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: /usr/bin/python3 -m venv
  tags:
    - bootstrap

- name: install wheel and sqlparse in virtualenv
  become_user: "{{ appuser }}"
  ansible.builtin.pip:
    name:
      - wheel
      - sqlparse
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: /usr/bin/python3 -m venv
  tags:
    - bootstrap

- name: install requirements in virtualenv
  become_user: "{{ appuser }}"
  ansible.builtin.pip:
    requirements: "{{ appdir }}/requirements-prod.txt"
    virtualenv: "{{ virtualenv }}"
    virtualenv_command: /usr/bin/python3 -m venv
  tags:
    - bootstrap
    - upgrade

- name: include nodejs installation
  include_role:
    name: common
    tasks_from: nodejs
  tags:
    - bootstrap

- name: install frontend  # noqa no-changed-when
  become_user: "{{ appuser }}"
  ansible.builtin.command: yarn install --frozen-lockfile
  args:
    chdir: "{{ appdir }}"
  tags:
    - bootstrap
    - upgrade

- name: install zmarkdown
  become_user: "{{ appuser }}"
  community.general.npm:
    path: "{{ zmarkdown_dir }}"
    production: true
  tags:
    - bootstrap
    - upgrade

# Frontend building

- name: build frontend  # noqa no-changed-when
  become_user: "{{ appuser }}"
  ansible.builtin.command: npm run build
  args:
    chdir: "{{ appdir }}"
  tags:
    - bootstrap
    - upgrade

- name: collect static files
  become_user: "{{ appuser }}"
  environment:
    DJANGO_SETTINGS_MODULE: "zds.settings.{{ env }}"
    ZDS_CONFIG: "{{ workdir }}/config.toml"
  community.general.django_manage:
    app_path: "{{ appdir }}"
    virtualenv: "{{ virtualenv }}"
    command: collectstatic
  tags:
    - bootstrap
    - upgrade

# Database migration and cache clearing
# Start of maintenance, if needed

- name: check if database migration is needed
  become_user: "{{ appuser }}"
  environment:
    DJANGO_SETTINGS_MODULE: "zds.settings.{{ env }}"
    ZDS_CONFIG: "{{ workdir }}/config.toml"
  community.general.django_manage:
    app_path: "{{ appdir }}"
    virtualenv: "{{ virtualenv }}"
    command: migrate --plan
  register: migrate_plan
  tags:
    - bootstrap
    - upgrade

- name: create symlink to the maintenance page
  ansible.builtin.file:
    src: "{{ webroot }}/errors/maintenance.html"
    dest: "{{ webroot }}/maintenance.html"
    state: link
  when: "'No planned migration operations.' not in migrate_plan.out"
  tags:
    - bootstrap
    - upgrade

- name: migrate database
  become_user: "{{ appuser }}"
  environment:
    DJANGO_SETTINGS_MODULE: "zds.settings.{{ env }}"
    ZDS_CONFIG: "{{ workdir }}/config.toml"
  community.general.django_manage:
    app_path: "{{ appdir }}"
    virtualenv: "{{ virtualenv }}"
    command: migrate
  when: "'No planned migration operations.' not in migrate_plan.out"
  tags:
    - bootstrap
    - upgrade

- name: clear cache
  become_user: "{{ appuser }}"
  environment:
    DJANGO_SETTINGS_MODULE: "zds.settings.{{ env }}"
    ZDS_CONFIG: "{{ workdir }}/config.toml"
  community.general.django_manage:
    app_path: "{{ appdir }}"
    virtualenv: "{{ virtualenv }}"
    command: clear_cache
  tags:
    - bootstrap
    - upgrade

# Services and timers

- name: create services and timers files
  ansible.builtin.template:
    src: templates/{{ item }}.j2
    dest: "/etc/systemd/system/{{ item }}"
    mode: u=rw,g=r,o=r
  with_items:
    - zmd.service
    - zds.service
    - zds.socket
    - zds-es-index.service
    - zds-es-index.timer
    - zds-watchdog.service
  tags:
    - bootstrap

- name: start services and timers
  ansible.builtin.systemd:
    state: started
    name: "{{ item }}"
    enabled: true
    daemon_reload: true
  with_items:
    - zmd.service
    - zds.service
    - zds.socket
    - zds-es-index.timer
    - zds-watchdog.service
  tags:
    - bootstrap

- name: reload zmarkdown and zds
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: reloaded
  with_items:
    - zmd
    - zds
  tags:
    - bootstrap
    - upgrade

- name: restart watchdog
  ansible.builtin.systemd:
    name: zds-watchdog
    state: restarted
  tags:
    - bootstrap
    - upgrade

- name: ensure that zmarkdown is running
  ansible.builtin.uri:
    url: http://localhost:27272/
    return_content: true
  register: this
  delay: 1
  retries: 10
  until: "'zmd is running' in this.content"
  tags:
    - bootstrap
    - upgrade

# End of maintenance, if needed

- name: remove maintenance symlink
  ansible.builtin.file:
    path: "{{ webroot }}/maintenance.html"
    state: absent
  tags:
    - bootstrap
    - upgrade
