upstream zdsappserver {
    server unix:/opt/zds/run/gunicorn.sock fail_timeout=0;
}

# Active le header X-Robots-Tag sur la beta pour Ã©viter d'indexer la beta
map $http_host $robots_tag_header {
    hostnames;
    default '';
    beta.zestedesavoir.com 'none';
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;


    location ~ /.well-known/acme-challenge {
        include snippets/proxy.conf;
        proxy_pass http://localhost:402;
    }

{% if certificate is defined and cert.stat.exists %}
    server_name {{ http_host }};
    return 301 https://$server_name$request_uri;
}

server {
{% endif %}
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    server_name {{ http_host }};

    try_files $uri @proxy;
    server_tokens off;
    client_max_body_size 100M;

{% if certificate is defined and cert.stat.exists %}
    ssl_certificate {{ certificate.cert }};
    ssl_certificate_key {{ certificate.key }};
{% endif %}
    include snippets/ssl.conf;

    # Logging
    access_log /var/log/zds/nginx-access.log;
    error_log /var/log/zds/nginx-error.log;

    # Rewrite de l'ancienne page de teasing
    rewrite ^/teasing/$ / permanent;

    root {{ webroot }};

    location ~ /.well-known {
        allow all;
    }

    location @proxy {
        # 503 si la maintenance est active
        if (-f $document_root/maintenance.html) {
            return 503;
        }

        # Ajout d'un trailing slash sur les URLs
        if ($uri !~ (\.|^/api)) {
            rewrite ^(.*[^/])$ $1/ permanent;
        }

        include snippets/proxy.conf;
        proxy_pass http://zdsappserver;
    }

    location @maintenance {
        rewrite ^(.*)$ /maintenance.html break;
    }

    # Cache headers on static resources
    location ~* ^/(static|media|errors)/ {
        include snippets/static-cache.conf;
        include snippets/clem_smileys.conf;
    }

    # HOTFIX 20171116 vhf
    # disallow everything except this because of security issues
    # with DELETE on API endpoints
    error_page 405 @error405;
    location @error405 {
        add_header Allow "GET, POST, HEAD, PUT" always;
    }
    if ( $request_method !~ ^(GET|POST|HEAD|PUT)$ ) {
        return 405;
    }
    # END HOTFIX

    # Error pages
    error_page 500 502 504 /errors/500.html;
    error_page 503 @maintenance;

    include snippets/headers.conf;
    include snippets/antispam.conf;
}

